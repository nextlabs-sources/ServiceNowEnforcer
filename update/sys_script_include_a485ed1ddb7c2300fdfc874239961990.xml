<?xml version="1.0" encoding="UTF-8"?>
<record_update table="sys_script_include">
    <sys_script_include action="INSERT_OR_UPDATE">
        <access>public</access>
        <active>true</active>
        <api_name>x_230565_emsn.CustomizeACLScript</api_name>
        <client_callable>false</client_callable>
        <description/>
        <name>CustomizeACLScript</name>
        <script><![CDATA[doneAll();
function doneAll()
{
  var ret = {};
  ret.olds = GetHasEnforcedEntity();
  ret.news = GetEnforceEntity();
  gs.debug("olds: " + ret.olds.join(","));
  gs.debug("news: " + ret.news.join(','));
  var difference = array_diff(ret.olds, ret.news);
  gs.debug("difference.removed: " + difference.removed.join(','));
  gs.debug("difference.added: " + difference.added.join(','));
  if (difference.removed.length > 0)
    ssClearOurACLs(difference.removed);
  if (difference.added.length > 0)
    ssQueryUpdateACLs(difference.added);
}

function ssClearOurACLs(entities) {
      var NXL_ACL_SCRIPT_TAG = '/** This Access Control Rule is automatically generated by Enforcer. Do not modify it! */';
      var NXL_ACL_BACKUP_TAG1 = 'function __original_script__ () {';
      var NXL_ACL_BACKUP_TAG2 = '} // end of __original_script__';
      var NXL_ACL_BACKUP_TAG3 = '// original sys_security_acl = ';

      var gr = new GlideRecordSecure('sys_security_acl');
      gr.addActiveQuery();
      gr.addQuery('script', 'STARTSWITH', NXL_ACL_SCRIPT_TAG);
      gr.addQuery('operation', 'IN', 'read,write,create,delete');
      if (entities) gr.addQuery('name', 'IN', entities);
      gr.addQuery('type', 'record');
      gr.query();
      while (gr.next()) {
        var friendlyName = gr.operation + '/' + gr.name + '/' + gr.type;
        var script = gr.getValue('script');

        // Requires role Hide List sys_security_acl.sys_security_acl_role.sys_security_acl
        gs.info('[ssClearOurACLs]Queried ' + friendlyName + '@' + gr.sys_id + ': sys_scope=' + gr.sys_scope + ', advanced=' +
          gr.advanced + ', condition=' + gr.getValue('condition') + ', script=' + gr.script);

        idxStart = script.indexOf(NXL_ACL_BACKUP_TAG3);
        if (0 < idxStart) {
          var aclAdvanced = script.substr(idxStart + NXL_ACL_BACKUP_TAG3.length, 1);
          gs.debug(friendlyName + '@' + gr.sys_id + ': sys_security_acl=' + aclAdvanced);
          gr.advanced = 'f' !== aclAdvanced && '0' !== aclAdvanced;
        } else {
          var iddeleteRecord = gr.deleteRecord();
          gs.debug('[ssClearOurACLs]Delete ' + friendlyName + '@' + iddeleteRecord);
          continue;
        }

        var idxStart = script.indexOf(NXL_ACL_BACKUP_TAG1);
        if (0 < idxStart) {
          var idxEnd = script.indexOf(NXL_ACL_BACKUP_TAG2);
          gr.setValue('script', script.substring(idxStart + NXL_ACL_BACKUP_TAG1.length, idxEnd).replace(/^\s+|[^\r\n]+$/g, ''));
        } else {
          gr.setValue('script', '');
          gr.advanced = false; // now the script field is invalid
        }
        var uid = gr.update('recover'); // Returns unique id of the new or update record. Returns null if the update fails.
        gs.info('[ssClearOurACLs]Recover ' + uid);
      }
    }

function ssQueryUpdateACLs(entities, apiName) {
      var NXL_ACL_SCRIPT_TAG = '/** This Access Control Rule is automatically generated by Enforcer. Do not modify it! */';

      var NXL_ACL_BACKUP_TAG1 = 'function __original_script__ () {';
      var NXL_ACL_BACKUP_TAG2 = '} // end of __original_script__';
      var NXL_ACL_BACKUP_TAG3 = '// original sys_security_acl = ';

      if (!apiName) apiName = 'x_230565_emsn.Enforcer';

      for (var idx = 0, cnt = entities.length; idx < cnt; ++idx) {
        var name = entities[idx];
        var tableName = name.toUpperCase();
        upsertSecACL(tableName + '_VIEW', name, 'read');
        upsertSecACL(tableName + '_EDIT', name, 'write');
        upsertSecACL(tableName + '_CREATE', name, 'create');
        upsertSecACL(tableName + '_DELETE', name, 'delete');
      }

      /**
       * Inserts a new record or update its script field if the ACL record with specific name existing. 
       * @param {string} action the Policy XMACL action name, e.g. INCIDENT_QUERY, INCIDENT_UPDATE, INCIDENT_CREATE, INCIDENT_DELETE
       * @param {string} name the name value of a sys_security_acl record to insert
       * @param {('read'|'write'|'create'|'delete')} operation the operation value of a sys_security_acl record to insert
       * @external apiName the API Name of Script Include, by default, 'x_230565_emsn.Enforcer'
       */
      function upsertSecACL(action, name, operation) {
        var friendlyName = operation + '/' + name;
        var sysSecAcl = new GlideRecordSecure('sys_security_acl');
        sysSecAcl.addActiveQuery();
        sysSecAcl.addQuery('operation', operation);
        sysSecAcl.addQuery('name', name);
        sysSecAcl.addQuery('type', 'record');
        sysSecAcl.query();
        if (sysSecAcl.next()) { // GlideRecord.get(Object name, Object value) or GlideRecord.get(Object sys_id)
          do {
            /** @type {string} */
            var script = sysSecAcl.getValue('script');

            // Requires role Hide List sys_security_acl.sys_security_acl_role.sys_security_acl
            gs.info('Queried ' + friendlyName + '@' + sysSecAcl.sys_id + ': sys_scope=' + sysSecAcl.sys_scope + ', advanced=' +
              sysSecAcl.advanced + ', condition=' + sysSecAcl.getValue('condition') + ', script=' + sysSecAcl.script);

            if (script) {
              if (script.startsWith(NXL_ACL_SCRIPT_TAG)) {
                continue; // The record generated by Enforcer has already existed
              }
              // var jsLines = script.match(/[^\r\n]+/g); // script.split(/\r?\n/)
            }
            // Referring to: 3. The script in the **Script** field (advanced) evaluates to true, or sets the variable "answer" to true, or is empty.
            // We construct a string representing a JavaScript expression, statement, or sequence of statements. The expression can include variables
            // and properties of existing objects. Moreover, add the original script content to the end in a certain format.
            var codeLines = buildACLScriptLines();

            // If the original value of the field `advanced` is `false` (It will be set to `true` later), record advanced=false
            // if(!sysSecAcl.advanced)
            codeLines.push(NXL_ACL_BACKUP_TAG3 + sysSecAcl.advanced);

            if (gs.nil(sysSecAcl.description)) { // passingly add some description
              sysSecAcl.description = 'allow ' + operation + ' if all checks evaluate to true (updated at ' + new Date() + ')';
            }
            updateACL(codeLines);
          } while (sysSecAcl.next());
        } else {
          sysSecAcl = new GlideRecordSecure('sys_security_acl');
          sysSecAcl.initialize(); // init: operation = create, type = record, sysSecAcl.admin_overrides = true        
          // sysSecAcl.sys_scope = 'global';
          // sysSecAcl.active = true;
          // sysSecAcl.type = 'record';
          sysSecAcl.name = name;
          sysSecAcl.operation = operation;
          sysSecAcl.admin_overrides = false;
          updateACL(buildACLScriptLines());
        }

        /**
         * Generates a string representing a JavaScript expression, statement, or sequence of statements. The expression can include variables and properties of existing objects.
         * @param {string} action the Policy XMACL action name, e.g. INCIDENT_VIEW, INCIDENT_EDIT, INCIDENT_CREATE, INCIDENT_DELETE
         * @param {('read'|'write'|'create'|'delete')} operation the operation value of a sys_security_acl record to insert
         * @param {string} [script] a Javascript expression/statement(s) string if the Access Control exists and its **Script** field is not empty
         * @return {string[]} multiple lines of code
         * @external apiName {string} the API Name of Script Include, by default, 'x_230565_emsn.Enforcer'
         * @external NXL_ACL_SCRIPT_TAG {string}
         * @example var apiName = 'x_230565_emsn.Enforcer'; var NXL_ACL_SCRIPT_TAG = NXL_ACL_BACKUP_TAG1 = NXL_ACL_BACKUP_TAG2 = '';
         * buildACLScript('INCIDENT_EDIT', 'write', 'true'); buildACLScript('INCIDENT_DELETE', 'delete', 'false');
         */
        function buildACLScriptLines() {
          var lines = [NXL_ACL_SCRIPT_TAG];
          var gsdebug = 'gs.debug("[' + action + ']" + current.sys_id + (current.isNewRecord() ? " (new)|" : "|") + current.operation()';

          if (script) {
			lines.push('function evil(str) {');
			lines.push('\t'+'var fn = Function;');
			lines.push('\t'+'return new fn(\'return \' + str)();');
			lines.push('}');
			lines.push('var evaluated = evil(' + JSON.stringify(script) + ');');
			  
            lines.push(gsdebug + ' + ": after original script, it evaluates to " + evaluated + " and answer is " + answer);');
            //jie 2018.10.12
			// lines.push('if (evaluated || answer) {');
            lines.push('if ((evaluated != false) || answer) {');
            pushCoreCode('\t');
            lines.push('} else');
            lines.push('\tanswer = false;');
            lines.push(NXL_ACL_BACKUP_TAG1);
            lines.push(script);
            lines.push(NXL_ACL_BACKUP_TAG2);
          } else {
            lines.push(gsdebug + ');');
            pushCoreCode('');
          }
          // gs.info('js=' + lines.join('\n'));
          return lines;

          function pushCoreCode(indent) {
              // var evaluate = apiName + '.evaluate("' + action + '", current, "' + operation + '");';
              // if ('write' !== operation) {
              //   lines.push(indent + 'answer = !' + evaluate);
              // } else {
              //   lines.push(indent + 'var deny = ' + evaluate);
              //   lines.push(indent + 'if("insert" == deny) current.setAbortAction(true);');
              //   lines.push(indent + 'answer = !deny;');
              // }
              lines.push(indent + 'answer = !' + apiName + '.EvaluateACL("' + action + '", current);');
          }
        }

        function updateACL(codeLines) {
          // If true (default), enables business rules. If false, disables business rules.
          sysSecAcl.setWorkflow(false); // Enables or disables the running of business rules, script engines, and audit.

          // sysSecAcl.admin_overrides = false; // Revoke specific privileges for admin
          sysSecAcl.advanced = true; // now the script field is valid
          sysSecAcl.setValue('script', codeLines.join('\n'));
          // var uid = sysSecAcl.insert(); // Returns the sys_id of the inserted record, or null if the record is not inserted.
          // update(Object reason) Updates the GlideRecord with any changes that have been made. If the record does not exist, it is inserted.
          var uid = sysSecAcl.update('secure ' + friendlyName); // Returns unique id of the new or update record. Returns null if the update fails.
          gs.info(friendlyName + '@' + uid); // *** Script: [DEBUG] 67bbf521db731300ec3a9b81ca9619b6, *** Script: [DEBUG] null
        }
      }
    }

function array_diff(o, n) {
    // deal with empty lists
    if (o == undefined) o = [];
    if (n == undefined) n = [];

    // sort both arrays (or this won't work)
    o.sort(); n.sort();

    // don't compare if either list is empty, this is based on MERGE-SORT algorithm
    if (o.length == 0 || n.length == 0) return { added: n, removed: o };

    // declare temporary variables
    var op = 0; var np = 0;
    var a = []; var r = [];

    // compare arrays and add to add or remove lists
    while (op < o.length && np < n.length) {
      if (o[op] < n[np]) {
        // push to diff?
        r.push(o[op]);
        op++;
      }
      else if (o[op] > n[np]) {
        // push to diff?
        a.push(n[np]);
        np++;
      }
      else {
        op++; np++;
      }
    }

    // add remaining items
    if (np < n.length)
      a = a.concat(n.slice(np, n.length));
    if (op < o.length)
      r = r.concat(o.slice(op, o.length));

    return { added: a, removed: r };
  }


  function GetEnforceEntity(request, response)
  {
    var enforcedEntities = {};
    
    //首先从EntityColumns表中获取所有active的entity内部名
    var strScopeName = 'x_230565_emsn';
    var customAttrTable = new GlideRecordSecure(strScopeName+"_entitycolumn");
      
    customAttrTable.query();
      
    while (customAttrTable.next()){

      var entityName = customAttrTable.getValue("name");
      var attrId = customAttrTable.getValue("column_id");
      var attrName = customAttrTable.getValue("column");
      var attrDisplayName = customAttrTable.getValue("label");
      var isAttrEnforce = customAttrTable.getValue("active");
      var isReference = customAttrTable.getValue("is_reference").toString().toLowerCase() === '1' ? true : false;
      var datatype = customAttrTable.getValue("type");
          
      if(!Array.isArray(enforcedEntities[entityName])){
          enforcedEntities[entityName] = [];
      }

      if(attrName) {
        enforcedEntities[entityName].push({
          'column_id': attrName,
          'column_name': attrName,
          'column_label': attrDisplayName,
          'active': !!isAttrEnforce,
          'is_reference': !!isReference,
          'type': datatype
        });     
      }
    }
    
    return Object.keys(enforcedEntities);
  }

  function GetHasEnforcedEntity()
  {
    var NXL_ACL_SCRIPT_TAG = '/** This Access Control Rule is automatically generated by Enforcer. Do not modify it! */';
    var ret = [];
      var sysSecAcl = new GlideRecordSecure('sys_security_acl');
      sysSecAcl.addActiveQuery();
      sysSecAcl.addQuery('type', 'record');
      sysSecAcl.addQuery('script', 'STARTSWITH', NXL_ACL_SCRIPT_TAG);
      sysSecAcl.query();
      var count = 0;
      while (sysSecAcl.next()) 
      {
        sysSecAcl.getValue('name');
        ret.push(sysSecAcl.getValue('name'));
        if (sysSecAcl.update())
            count ++; 
      }

      function unique2(arr){
        var hash=[];
        var map = {};
        for (var i = 0; i < arr.length; i++) {
           if (!map[arr[i]])
           {
            map[arr[i]] = true;
            hash.push(arr[i]);
           }
        }
        return hash;
      }
      return unique2(ret);
  }]]></script>
        <sys_class_name>sys_script_include</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2018-09-26 06:01:03</sys_created_on>
        <sys_id>a485ed1ddb7c2300fdfc874239961990</sys_id>
        <sys_mod_count>13</sys_mod_count>
        <sys_name>CustomizeACLScript</sys_name>
        <sys_package display_value="NextLabs Entitlement Management" source="x_230565_emsn">349744b5db475300f1db176a4896190f</sys_package>
        <sys_policy>read</sys_policy>
        <sys_scope display_value="NextLabs Entitlement Management">349744b5db475300f1db176a4896190f</sys_scope>
        <sys_update_name>sys_script_include_a485ed1ddb7c2300fdfc874239961990</sys_update_name>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2019-02-18 06:54:21</sys_updated_on>
    </sys_script_include>
</record_update>
